(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{504:function(s,n,a){s.exports=a.p+"assets/img/moudle.1403d813.jpeg"},516:function(s,n,a){"use strict";a.r(n);var e=a(6),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"_1-什么是模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是模块"}},[s._v("#")]),s._v(" 1.什么是模块?")]),s._v(" "),e("ul",[e("li",[s._v("模块化：就是将独立的功能代码封装成一个文件，其他模块需要使用，在进行引用。")]),s._v(" "),e("li",[s._v("模块化有利于代码的拆分和架构上的解耦")]),s._v(" "),e("li",[s._v("块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(504),alt:"alt 属性文本"}})]),s._v(" "),e("h2",{attrs:{id:"_2-模块化的进化过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-模块化的进化过程"}},[s._v("#")]),s._v(" 2.模块化的进化过程")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("全局function模式：将不同的功能封装成不同的全局函数")]),e("br"),s._v("\n污染全局命名空间, 容易引起命名冲突或数据不安全，而且模块成员之间看不出直接关系")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function m1(){\n  //...\n}\nfunction m2(){\n  //...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("namespace模式 : 简单对象封装")]),e("br"),s._v("\n作用: 减少了全局变量，解决命名冲突"),e("br"),s._v("\n问题: 数据不安全(外部可以直接修改模块内部的数据)")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let myModule = {\n  data: 'www.baidu.com',\n  foo() {\n    console.log(`foo() ${this.data}`)\n  },\n  bar() {\n    console.log(`bar() ${this.data}`)\n  }\n}\nmyModule.data = 'other data' //能直接修改模块内部的数据\nmyModule.foo() // foo() other data\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("IIFE模式：匿名函数自调用(闭包)")]),e("br"),s._v("\n作用: 数据是私有的, 模块外部不能访问和修改内部变量，外部只能通过暴露的方法操作\n编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('// index.html文件\n<script type="text/javascript" src="module.js"><\/script>\n<script type="text/javascript">\n    myModule.foo() //foo www.baidu.com\n    myModule.bar() //bar www.baidu.com\n    console.log(myModule.data) //undefined 不能访问模块内部数据\n    myModule.data = \'xxxx\' //不是修改的模块内部的data\n    myModule.foo() //没有改变\n<\/script>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// module.js文件\n(function(window) {\n  let data = 'www.baidu.com'\n  //操作数据的函数\n  function foo() {\n    //用于暴露有函数\n    console.log(`foo() ${data}`)\n  }\n  function bar() {\n    //用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherFun() //内部调用\n  }\n  function otherFun() {\n    //内部私有的函数\n    console.log('otherFun()')\n  }\n  //暴露行为\n  window.myModule = { foo, bar } //ES6写法\n})(window)\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("IIFE模式增强 : 引入依赖")]),e("br"),s._v("\n这就是现代模块实现的基石")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// module.js文件\n(function(window, $) {\n  let data = 'www.baidu.com'\n  //操作数据的函数\n  function foo() {\n    //用于暴露有函数\n    console.log(`foo() ${data}`)\n    $('body').css('background', 'red')\n  }\n  //暴露行为\n  window.myModule = { foo }\n})(window, jQuery)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' // index.html文件\n  \x3c!-- 引入的js必须有一定顺序 --\x3e\n  <script type="text/javascript" src="jquery-1.10.1.js"><\/script>\n  <script type="text/javascript" src="module.js"><\/script>\n  <script type="text/javascript">\n    myModule.foo()\n  <\/script>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("上例子通过jquery方法将页面的背景颜色改成红色，所以必须先引入jQuery库，就把这个库当作参数传入。这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显。")]),s._v(" "),e("h2",{attrs:{id:"_3-模块化的好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-模块化的好处"}},[s._v("#")]),s._v(" 3.模块化的好处")]),s._v(" "),e("ul",[e("li",[s._v("避免命名冲突(减少命名空间污染)")]),s._v(" "),e("li",[s._v("更好的分离, 按需加载")]),s._v(" "),e("li",[s._v("更高复用性")]),s._v(" "),e("li",[s._v("高可维护性")])]),s._v(" "),e("h2",{attrs:{id:"_4-模块化规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-模块化规范"}},[s._v("#")]),s._v(" 4.模块化规范")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("1.CommonJS")]),e("br"),s._v("\nNode.js是commonJS规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持："),e("br"),s._v("\nmodule、exports、require、global。  实际使用时，用module.exports定义当前模块对外输出的接口（不推荐直接用exports），用require加载模块。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 定义模块math.js\nvar basicNum = 0;\nfunction add(a, b) {\n  return a + b;\n}\nmodule.exports = { //在这里写上需要向外暴露的函数、变量\n  add: add,\n  basicNum: basicNum\n}\n\n// 引用自定义的模块时，参数包含路径，可省略.js\nvar math = require('./math');\nmath.add(2, 5);\n\n// 引用核心模块时，不需要带路径\nvar http = require('http');\nhttp.createService(...).listen(3000);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("commonJS用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。"),e("br"),s._v("\n但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("2.AMD和require.js")]),e("br"),s._v("\nAMD规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用require.js实现AMD规范的模块化：用require.config()指定引用路径等，用define()定义模块，用require()加载模块。"),e("br"),s._v("\n首先我们需要引入require.js文件和一个入口文件main.js。main.js中配置require.config()并规定项目中用到的基础模块。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/** 网页中引入require.js及main.js **/\n<script src="js/require.js" data-main="js/main"><\/script>\n\n/** main.js 入口文件/主模块 **/\n// 首先用config()指定各模块路径和引用名\nrequire.config({\n  baseUrl: "js/lib",\n  paths: {\n    "jquery": "jquery.min",  //实际路径为js/lib/jquery.min.js\n    "underscore": "underscore.min",\n  }\n});\n// 执行基本操作\nrequire(["jquery","underscore"],function($,_){\n  // some code here\n});\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("引用模块的时候，我们将模块名放在[]中作为reqiure()的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在[]中作为define()的第一参数。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 定义math.js模块\ndefine(function () {\n    var basicNum = 0;\n    var add = function (x, y) {\n        return x + y;\n    };\n    return {\n        add: add,\n        basicNum :basicNum\n    };\n});\n// 定义一个依赖underscore.js的模块\ndefine(['underscore'],function(_){\n  var classify = function(list){\n    _.countBy(list,function(num){\n      return num > 30 ? 'old' : 'young';\n    })\n  };\n  return {\n    classify :classify\n  };\n})\n\n// 引用模块，将模块放在[]内\nrequire(['jquery', 'math'],function($, math){\n  var sum = math.add(10,20);\n  $(\"#sum\").html(sum);\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("3.CMD和sea.js")]),e("br"),s._v("\nrequire.js在申明依赖的模块时会在第一之间加载并执行模块内的代码：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('define(["a", "b", "c", "d", "e", "f"], function(a, b, c, d, e, f) { \n    // 等于在最前面声明并初始化了要用到的所有模块\n    if (false) {\n      // 即便没用到某个模块 b，但 b 还是提前执行了\n      b.foo()\n    } \n});\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("CMD是另一种js模块化方案，它与AMD很类似，"),e("br"),s._v("\n不同点在于：AMD 推崇依赖前置、提前执行，  CMD推崇依赖就近、延迟执行。"),e("br"),s._v("\n此规范其实是在sea.js推广过程中产生的。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('/** AMD写法 **/\ndefine(["a", "b", "c", "d", "e", "f"], function(a, b, c, d, e, f) { \n     // 等于在最前面声明并初始化了要用到的所有模块\n    a.doSomething();\n    if (false) {\n        // 即便没用到某个模块 b，但 b 还是提前执行了\n        b.doSomething()\n    } \n});\n\n/** CMD写法 **/\ndefine(function(require, exports, module) {\n    var a = require(\'./a\'); //在需要时申明\n    a.doSomething();\n    if (false) {\n        var b = require(\'./b\');\n        b.doSomething();\n    }\n});\n\n/** sea.js **/\n// 定义模块 math.js\ndefine(function(require, exports, module) {\n    var $ = require(\'jquery.js\');\n    var add = function(a,b){\n        return a+b;\n    }\n    exports.add = add;\n});\n// 加载模块\nseajs.use([\'math.js\'], function(math){\n    var sum = math.add(1+2);\n});\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("4.ES6 Module")]),e("br"),s._v("\nES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/** 定义模块 math.js **/\nvar basicNum = 0;\nvar add = function (a, b) {\n    return a + b;\n};\nexport { basicNum, add };\n\n/** 引用模块 **/\nimport { basicNum, add } from './math';\nfunction test(ele) {\n    ele.textContent = add(99 + basicNum);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("如上例所示，使用import命令的时候，用户需要知道所要加载的变量名或函数名。其实ES6还提供了export default命令，为模块指定默认输出，对应的import语句不需要使用大括号。这也更趋近于ADM的引用写法。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/** export default **/\n//定义输出\nexport default { basicNum, add };\n//引入\nimport math from './math';\nfunction test(ele) {\n    ele.textContent = math.add(99 + math.basicNum);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("ES6的模块不是对象，import命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。")]),s._v(" "),e("h2",{attrs:{id:"_5-es6-模块与-commonjs-模块的差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-es6-模块与-commonjs-模块的差异"}},[s._v("#")]),s._v(" 5.ES6 模块与 CommonJS 模块的差异")]),s._v(" "),e("p",[e("strong",[s._v("1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")])]),s._v(" "),e("ul",[e("li",[s._v("CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。")]),s._v(" "),e("li",[s._v("ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。")])]),s._v(" "),e("p",[e("strong",[s._v("2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")])]),s._v(" "),e("ul",[e("li",[s._v("运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。")]),s._v(" "),e("li",[s._v("编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。")])]),s._v(" "),e("p",[s._v("CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])])}),[],!1,null,null,null);n.default=t.exports}}]);